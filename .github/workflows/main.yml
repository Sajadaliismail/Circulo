name: CI/CD Pipeline

on:
  push:
    branches:
      - backend-branch
  pull_request:
    branches:
      - backend-branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Install dependencies for post-service
        working-directory: ./backend/post-services
        run: npm install

      #  - name: Run tests for post-service
      #    working-directory: ./backend/post-services
      #    run: npm test

      - name: Build Docker image for post-service
        working-directory: ./backend/post-services
        run: |
          docker build -t post-service:latest .

      - name: Install dependencies for auth-service
        working-directory: ./backend/user-services
        run: npm install

      #  - name: Run tests for auth-service
      #    working-directory: ./backend/user-services
      #    run: npm test

      - name: Build Docker image for auth-service
        working-directory: ./backend/user-services
        run: |
          docker build -t auth-service:latest .

      - name: Install dependencies for chat-service
        working-directory: ./backend/chat-services
        run: npm install

      #  - name: Run tests for chat-service
      #    working-directory: ./backend/chat-services
      #    run: npm test

      - name: Build Docker image for chat-service
        working-directory: ./backend/chat-services
        run: |
          docker build -t chat-service:latest .

      - name: Install dependencies for friends-service
        working-directory: ./backend/friends-services
        run: npm install

      #  - name: Run tests for friends-service
      #    working-directory: ./backend/friends-services
      #    run: npm test

      - name: Build Docker image for friends-service
        working-directory: ./backend/friends-services
        run: |
          docker build -t friends-service:latest .

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker images to DockerHub
        run: |
          docker tag post-service:latest ${{ secrets.DOCKER_USERNAME }}/post-service:latest
          docker tag auth-service:latest ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
          docker tag chat-service:latest ${{ secrets.DOCKER_USERNAME }}/chat-service:latest
          docker tag friends-service:latest ${{ secrets.DOCKER_USERNAME }}/friends-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/post-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/chat-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/friends-service:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Production
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          # POST_SERVICE_PORT: ${{ secrets.POST_SERVICE_PORT }}
          # AUTH_SERVICE_PORT: ${{ secrets.AUTH_SERVICE_PORT }}
          # CHAT_SERVICE_PORT: ${{ secrets.CHAT_SERVICE_PORT }}
          # FRIENDS_SERVICE_PORT: ${{ secrets.FRIENDS_SERVICE_PORT }}
        run: |


          ssh -i $SSH_PRIVATE_KEY ec2-user@ec2-65-0-173-200.ap-south-1.compute.amazonaws.com << 'EOF'

          # Remove old images
          docker image prune -a -f

            docker pull ${{ secrets.DOCKER_USERNAME }}/post-service:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/chat-service:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/friends-service:latest
            docker-compose -f /home/ec2-user/circulo//docker-compose.yml up -d
          EOF
